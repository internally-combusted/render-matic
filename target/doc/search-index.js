var N = null;var searchIndex = {};
searchIndex["render_matic"]={"doc":"","items":[[0,"component","render_matic","The \"component\" part of the entity-component model.",N,N],[3,"Component","render_matic::component","A single data object with no associated behavior.",N,N],[12,"id","","This `Component`'s unique index in the list of all…",0,N],[12,"component_type","","The type of the `Component`.",0,N],[12,"component_data","","The data the `Component` carries.",0,N],[3,"ComponentManager","","The owner for all [`Component`]s. Controls creation,…",N,N],[12,"counter","","The number of [`Component`]s that have been created. Used…",1,N],[12,"components","","A list of all extant game [`Component`]s.",1,N],[4,"ComponentType","","An `enum` for the different types of [`Component`]s. Rust…",N,N],[13,"Quad","","A simple textured quad.",2,N],[13,"Animation2D","","An animated quad.",2,N],[4,"ComponentData","","Stores a [`Component`]'s data. Use `match` or `if let`…",N,N],[13,"Animation2D","","An animated quad.",3,N],[12,"texture_index","render_matic::component::ComponentData","",3,N],[12,"spritesheet_index","","Which [`Spritesheet`] this [`Component`] uses.",3,N],[12,"layer","","The [`Component`]'s z-distance. Lower layers have higher…",3,N],[12,"animations","","A list of this [`Component`]'s [`Animation`]s.",3,N],[12,"current_animation","","An [`Index`] into the `animations` `Vec` representing the…",3,N],[12,"transform_data","","The `Component`'s position, scaling, and rotation values.",3,N],[12,"start_time","","When the current animation began, used to calculate which…",3,N],[13,"Quad","render_matic::component","A plain textured quad.",3,N],[12,"texture_index","render_matic::component::ComponentData","",3,N],[12,"transform_data","","The [`Component`]'s position, scaling, and rotation…",3,N],[12,"uv_offset","","The (u, v) coordinates of the point on the `Quad`'s…",3,N],[12,"layer","","",3,N],[11,"load_components","render_matic::component","Loads all [`Component`] data from disk.",1,[[],["result",["componentmanager","error"]]]],[11,"create_component","","Creates a [`Component`] with the given type and data, then…",1,[[["self"],["componenttype"],["componentdata"]],["index"]]],[11,"add_entity_component","","Adds a [`Component`] to the specified [`Entity`].",1,[[["self"],["index"],["entitymanager"],["index"]]]],[11,"get_component","","Retrieves a reference to the [`Component`] with the given…",1,[[["self"],["index"]],["component"]]],[11,"get_component_mut","","Retrieves a mutable reference to the `Component` with the…",1,[[["self"],["index"]],["component"]]],[11,"get_entity_components_of_type","","Get `id`s for all [`Component`]s belonging to the given…",1,[[["self"],["index"],["entitymanager"],["componenttype"]],["vec",["index"]]]],[11,"get_components_of_type","","Get `id`s for all existing [`Component`]s of the given type.",1,[[["self"],["componenttype"]],["vec",["index"]]]],[11,"remove_entity_component","","Removes a [`Component`] from an [`Entity`].",1,[[["self"],["entitymanager"],["index"],["index"]],["result",["error"]]]],[0,"config","render_matic","Stuff for (de-)serializing global game configuration values.",N,N],[3,"Configuration","render_matic::config","Global game configuration.",N,N],[12,"graphics","","",4,N],[3,"Graphics","","Graphics-related configuration.",N,N],[12,"window","","",5,N],[3,"Window","","",N,N],[12,"size","","Window size in pixels.",6,N],[11,"new","","Reads game configuration data from `./config.yaml`.",4,[[],["result",["error"]]]],[0,"data","render_matic","Management of all game data, primarily data relating to…",N,N],[3,"Author","render_matic::data","Data for a single author.",N,N],[12,"name","","Author's name.",7,N],[12,"email","","(Optional) Author's email address.",7,N],[3,"Program","","",N,N],[12,"name","","The game's name.",8,N],[12,"version","","(Optional) The game version.",8,N],[3,"GameMap","","A map containing tile and event data.",N,N],[12,"index","","",9,N],[12,"name","","",9,N],[12,"size","","",9,N],[12,"entities","","",9,N],[3,"GameData","","Metadata related to the game itself as a program.",N,N],[12,"authors","","Data for the author(s) of the game.",10,N],[12,"program","","Data about the game.",10,N],[3,"DataManager","","Owner for all game data.",N,N],[12,"game_data","","",11,N],[12,"resource_manager","","",11,N],[12,"component_manager","","",11,N],[12,"entity_manager","","",11,N],[12,"backgrounds","","",11,N],[12,"maps","","",11,N],[12,"spritesheets","","",11,N],[11,"new","","Creates the `GameData` object by loading from a…",10,[[],["result",["error"]]]],[11,"new","","Creates a new `DataManager` by loading all relevant YAML…",11,[[],["result",["datamanager","error"]]]],[0,"draw","render_matic","",N,N],[3,"Spritesheet","render_matic::draw","A partitioned texture (or contiguous region of an atlas)…",N,N],[12,"index","","",12,N],[12,"pitch","","The number of frames in each row.",12,N],[12,"position","","",12,N],[12,"size","","",12,N],[12,"frame_size","","",12,N],[3,"Background","","A static image to display beneath all other images.",N,N],[12,"index","","",13,N],[12,"position","","",13,N],[12,"size","","",13,N],[3,"DrawingSystem","","Performs all drawing operations.",N,N],[3,"Animation","","A single animation sequence for a sprite.",N,N],[12,"frames","","The sequence of frames to use from the spritesheet.",14,N],[12,"animation_type","","How the animation progresses through the frames.",14,N],[12,"frame_length","","The length of each frame in milliseconds.",14,N],[4,"AnimationType","","Whether and how the animation repeats.",N,N],[13,"Loop","","Repeat by going through the sequence over and over: 1 2 3…",15,N],[13,"Bounce","","Repeat by going back and forth through the sequence: 1 2 3…",15,N],[13,"Once","","Play once, then stop.",15,N],[8,"Draw2D","","A trait required for any `Component` that needs to be…",N,N],[10,"vertex_data","","",16,[[["self"],["mat4"],["datamanager"]],["result",["vec","error"]]]],[11,"new","","",17,[[["window"],["datamanager"]],["result",["error"]]]],[11,"draw_frame","","Collects all drawable [`Component`]s and sends them to the…",17,[[["self"]]]],[11,"clean_up","","",17,[[["self"]],["result",["error"]]]],[0,"entity","render_matic","",N,N],[3,"Entity","render_matic::entity","An entity is just a bundle of components.",N,N],[12,"id","","",18,N],[12,"entity_type","","",18,N],[12,"components","","",18,N],[3,"EntityManager","","The owner for all entities. Handles creation, access, and…",N,N],[12,"counter","","",19,N],[12,"entities","","",19,N],[4,"EntityType","","",N,N],[13,"Background","","",20,N],[13,"Sprite","","",20,N],[11,"new","","",18,[[["index"],["entitytype"]],["self"]]],[11,"load_entities","","",19,[[],["result",["entitymanager","error"]]]],[11,"create_entity","","",19,[[["self"],["entitytype"]],["index"]]],[11,"get_entities_of_type","","",19,[[["self"],["entitytype"]],["vec",["index"]]]],[11,"get_entity","","",19,[[["self"],["index"]],["entity"]]],[11,"get_entity_mut","","",19,[[["self"],["index"]],["entity"]]],[0,"error","render_matic","",N,N],[4,"Error","render_matic::error","",N,N],[13,"Bind","","",21,N],[13,"DescriptorAllocation","","",21,N],[13,"HostExecution","","",21,N],[13,"Image","","",21,N],[13,"ImageCreation","","",21,N],[13,"ImageView","","",21,N],[13,"Index","","",21,N],[13,"Io","","",21,N],[13,"Mapping","","",21,N],[13,"MemoryAllocation","","",21,N],[13,"None","","",21,N],[13,"NoSuitableMemory","","",21,N],[13,"OutOfMemory","","",21,N],[13,"OutOfMemoryOrDeviceLost","","",21,N],[13,"SerdeYaml","","",21,N],[13,"Shader","","",21,N],[13,"WindowCreation","","",21,N],[13,"WrongType","","",21,N],[0,"geometry","render_matic","",N,N],[3,"VertexData","render_matic::geometry","Contains all of the data needed for a vertex.",N,N],[12,"position","","",22,N],[12,"uv","","",22,N],[12,"color","","",22,N],[12,"texture_index","","",22,N],[3,"TransformData","","A representation of objects' positions, orientations, etc.",N,N],[12,"translation","","",23,N],[12,"scaling","","",23,N],[12,"rotation","","",23,N],[4,"LayerDepth","","Contains the z-coordinates for each layer of quads.",N,N],[13,"Sprite","","",24,N],[13,"Background","","",24,N],[5,"projection_matrix","","The orthographic projection matrix (since we're doing a…",N,[[["vec2"]],["mat4"]]],[17,"QUAD_UVS","","The UV coordinates to make a texture fit a quad precisely.",N,N],[17,"QUAD_VERTICES","","The vertices of a unit square centered on the origin.",N,N],[17,"QUAD_INDICES","","The base vertex indices to form a quad.",N,N],[8,"Transform2D","","This trait is to ensure that every component that can be…",N,N],[11,"translation_matrix","","",25,[[["self"]],["mat3"]]],[11,"rotation_matrix","","",25,[[["self"]],["mat3"]]],[11,"scaling_matrix","","",25,[[["self"]],["mat3"]]],[11,"transformation_matrix","","This should probably never need to be overridden.",25,[[["self"]],["mat3"]]],[11,"new","","",23,[[["vec2"],["vec2"],["f32"]],["transformdata"]]],[0,"pipeline","render_matic","Creating and handling graphics pipelines.",N,N],[3,"PipelineData","render_matic::pipeline","Holds all the data needed to create and use a pipeline.",N,N],[12,"pipeline_layout","","",26,N],[12,"pipeline","","",26,N],[12,"sampler","","",26,N],[12,"sampler_set","","",26,N],[12,"texture_sets","","",26,N],[11,"new","","Creates and returns a new `PipelineData` object.",26,N],[11,"destroy","","Destroys all resources created by the PipelineData,…",26,[[["self"],["device"]]]],[0,"render","render_matic","A rendering system using the `gfx_hal` crate.",N,N],[3,"BufferObject","render_matic::render","Represents a buffer and all of the data and logic…",N,N],[12,"buffer","","",27,N],[12,"requirements","","",27,N],[12,"offset","","The [`Buffer`]'s offset into its associated allocated…",27,N],[3,"FormattedVertexData","","Contains data for a vertex containing only the elements…",N,N],[12,"position","","",28,N],[12,"color","","",28,N],[12,"uv","","",28,N],[3,"Renderer","","Receives graphical data and draws it to the screen.",N,N],[12,"physical_size","","",29,N],[12,"color_format","","",29,N],[5,"select_memory_type","","Given a set of memory requirements, finds and returns a…",N,N],[11,"new","","",27,[[["device"],["u64"],["usage"]],["bufferobject"]]],[11,"allocate_buffers","","Finds a suitable [`MemoryType`] for the given set of…",27,N],[11,"copy_data_to_buffer","","",27,N],[11,"new","","Creates a new renderer for the given window and sets up a…",29,[[["str"],["window"],["resourcemanager"]],["result",["error"]]]],[11,"render_frame","","Renders a frame using the data provided by the given…",29,[[["self"],["vec",["formattedvertexdata"]],["vec",["range"]]]]],[11,"clean_up","","Waits for executing command buffers to idle, then releases…",29,[[["self"]],["result",["error"]]]],[0,"resource","render_matic","Handling of media including fonts, music, and textures.",N,N],[3,"ResourceManager","render_matic::resource","Central repository (but not direct owner) of media…",N,N],[12,"fonts","","",30,N],[12,"textures","","",30,N],[11,"load_resources","","Acquires all resources specified in `./data/resources.yaml`.",30,[[],["result",["resourcemanager","error"]]]],[11,"clean_up","","Releases all resources held by this object.",30,N],[0,"serial","render_matic","Types and traits to assist with (de-)serialization.",N,N],[3,"Position3D","render_matic::serial","A unified representation of a 3D position.",N,N],[12,"x","","",31,N],[12,"y","","",31,N],[12,"z","","",31,N],[3,"Size","","A unified representation of a 2D size.",N,N],[12,"x","","",32,N],[12,"y","","",32,N],[3,"Color","","A unified representation of rgba color.",N,N],[12,"r","","",33,N],[12,"g","","",33,N],[12,"b","","",33,N],[12,"a","","",33,N],[6,"Position2D","","Allow code to be clear that a position is involved instead…",N,N],[6,"Filename","","",N,N],[6,"Index","","",N,N],[0,"text","render_matic","",N,N],[3,"GameFont","render_matic::text","",N,N],[12,"index","","",34,N],[12,"file","","",34,N],[12,"data","","",34,N],[5,"render_text","","Renders the given static text component to a texture.",N,N],[0,"texture","render_matic","Loading and management of textures.",N,N],[3,"Texture","render_matic::texture","Owns texture data and handles Vulkan-related constructs…",N,N],[12,"index","","",35,N],[12,"size","","The size in texels.",35,N],[12,"file","","",35,N],[12,"buffer_memory_range","","When this `Texture` is bound to buffer memory, this stores…",35,N],[12,"image_view","","The [`ImageView`] for the pipeline to use.",35,N],[12,"data","","The actual image data.",35,N],[12,"image","","This `Texture` as a Vulkan object.",35,N],[12,"normalization_matrix","","A matrix precalculated based on the `Texture`'s size to…",35,N],[12,"descriptor_set","","This `Texture`'s `DescriptorSet`. TODO: Will probably need…",35,N],[5,"total_texture_size","","",N,N],[11,"new","","Creates a new `Texture` and copies the texture data to…",35,N],[11,"initialize","","Loads texture data from file and creates the `Texture`'s…",35,N],[11,"buffer_data","","Copies the `Texture` data to the given buffer memory.",35,N],[11,"image_data_size","","Finds the memory size needed for the given texture.",35,[[["rgbaimage"],["limits"]],["u64"]]],[11,"copy_image_to_memory","","Given the location of this Texture's image data in the…",35,N],[11,"get_image","","A method for getting the `image` field because `unwrap()`…",35,[[["self"]],["result",["error"]]]],[11,"get_image_view","","A method for getting the `image_view` field because…",35,[[["self"]],["result",["error"]]]],[11,"get_data","","A method for getting the `data` field because `unwrap()`…",35,[[["self"]],["result",["rgbaimage","error"]]]],[11,"destroy","","Releases resources held by this object.",35,[[["self"],["device"]]]],[0,"time","render_matic","",N,N],[3,"EPOCH","render_matic::time","",N,N],[3,"Profiler","","A quick thing for calculating FPS sort of. There's almost…",N,N],[5,"elapsed_as_millis","","Returns the time elapsed in milliseconds since the given…",N,[[["instant"]],["u64"]]],[5,"calculate_frame","","Returns the current frame for a simple looping animation.",N,[[["instant"],["usize"],["u32"]],["usize"]]],[11,"new","","",36,[[["str"]],["profiler"]]],[11,"log_time","","Uses `warn!` to output the time since the last call to…",36,[[["self"],["str"]]]],[11,"into","render_matic::component","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_subset","","",0,[[["self"]],["option"]]],[11,"is_in_subset","","",0,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",0,[[["self"]],["ss"]]],[11,"from_subset","","",0,[[["ss"]],["sp"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_subset","","",1,[[["self"]],["option"]]],[11,"is_in_subset","","",1,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",1,[[["self"]],["ss"]]],[11,"from_subset","","",1,[[["ss"]],["sp"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_subset","","",2,[[["self"]],["option"]]],[11,"is_in_subset","","",2,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",2,[[["self"]],["ss"]]],[11,"from_subset","","",2,[[["ss"]],["sp"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"to_subset","","",3,[[["self"]],["option"]]],[11,"is_in_subset","","",3,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",3,[[["self"]],["ss"]]],[11,"from_subset","","",3,[[["ss"]],["sp"]]],[11,"into","render_matic::config","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_subset","","",4,[[["self"]],["option"]]],[11,"is_in_subset","","",4,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",4,[[["self"]],["ss"]]],[11,"from_subset","","",4,[[["ss"]],["sp"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_subset","","",5,[[["self"]],["option"]]],[11,"is_in_subset","","",5,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",5,[[["self"]],["ss"]]],[11,"from_subset","","",5,[[["ss"]],["sp"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"to_subset","","",6,[[["self"]],["option"]]],[11,"is_in_subset","","",6,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",6,[[["self"]],["ss"]]],[11,"from_subset","","",6,[[["ss"]],["sp"]]],[11,"into","render_matic::data","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_subset","","",7,[[["self"]],["option"]]],[11,"is_in_subset","","",7,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",7,[[["self"]],["ss"]]],[11,"from_subset","","",7,[[["ss"]],["sp"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_subset","","",8,[[["self"]],["option"]]],[11,"is_in_subset","","",8,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",8,[[["self"]],["ss"]]],[11,"from_subset","","",8,[[["ss"]],["sp"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_subset","","",9,[[["self"]],["option"]]],[11,"is_in_subset","","",9,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",9,[[["self"]],["ss"]]],[11,"from_subset","","",9,[[["ss"]],["sp"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_subset","","",10,[[["self"]],["option"]]],[11,"is_in_subset","","",10,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",10,[[["self"]],["ss"]]],[11,"from_subset","","",10,[[["ss"]],["sp"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_subset","","",11,[[["self"]],["option"]]],[11,"is_in_subset","","",11,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",11,[[["self"]],["ss"]]],[11,"from_subset","","",11,[[["ss"]],["sp"]]],[11,"into","render_matic::draw","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_subset","","",12,[[["self"]],["option"]]],[11,"is_in_subset","","",12,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",12,[[["self"]],["ss"]]],[11,"from_subset","","",12,[[["ss"]],["sp"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_subset","","",13,[[["self"]],["option"]]],[11,"is_in_subset","","",13,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",13,[[["self"]],["ss"]]],[11,"from_subset","","",13,[[["ss"]],["sp"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_subset","","",17,[[["self"]],["option"]]],[11,"is_in_subset","","",17,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",17,[[["self"]],["ss"]]],[11,"from_subset","","",17,[[["ss"]],["sp"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_subset","","",14,[[["self"]],["option"]]],[11,"is_in_subset","","",14,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",14,[[["self"]],["ss"]]],[11,"from_subset","","",14,[[["ss"]],["sp"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_subset","","",15,[[["self"]],["option"]]],[11,"is_in_subset","","",15,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",15,[[["self"]],["ss"]]],[11,"from_subset","","",15,[[["ss"]],["sp"]]],[11,"into","render_matic::entity","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"to_subset","","",18,[[["self"]],["option"]]],[11,"is_in_subset","","",18,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",18,[[["self"]],["ss"]]],[11,"from_subset","","",18,[[["ss"]],["sp"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_subset","","",19,[[["self"]],["option"]]],[11,"is_in_subset","","",19,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",19,[[["self"]],["ss"]]],[11,"from_subset","","",19,[[["ss"]],["sp"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_subset","","",20,[[["self"]],["option"]]],[11,"is_in_subset","","",20,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",20,[[["self"]],["ss"]]],[11,"from_subset","","",20,[[["ss"]],["sp"]]],[11,"into","render_matic::error","",21,[[["self"]],["u"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"to_subset","","",21,[[["self"]],["option"]]],[11,"is_in_subset","","",21,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",21,[[["self"]],["ss"]]],[11,"from_subset","","",21,[[["ss"]],["sp"]]],[11,"into","render_matic::geometry","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"to_subset","","",22,[[["self"]],["option"]]],[11,"is_in_subset","","",22,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",22,[[["self"]],["ss"]]],[11,"from_subset","","",22,[[["ss"]],["sp"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_subset","","",23,[[["self"]],["option"]]],[11,"is_in_subset","","",23,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",23,[[["self"]],["ss"]]],[11,"from_subset","","",23,[[["ss"]],["sp"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_subset","","",24,[[["self"]],["option"]]],[11,"is_in_subset","","",24,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",24,[[["self"]],["ss"]]],[11,"from_subset","","",24,[[["ss"]],["sp"]]],[11,"into","render_matic::pipeline","",26,[[["self"]],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"to_subset","","",26,[[["self"]],["option"]]],[11,"is_in_subset","","",26,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",26,[[["self"]],["ss"]]],[11,"from_subset","","",26,[[["ss"]],["sp"]]],[11,"into","render_matic::render","",27,[[["self"]],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_subset","","",27,[[["self"]],["option"]]],[11,"is_in_subset","","",27,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",27,[[["self"]],["ss"]]],[11,"from_subset","","",27,[[["ss"]],["sp"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_subset","","",28,[[["self"]],["option"]]],[11,"is_in_subset","","",28,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",28,[[["self"]],["ss"]]],[11,"from_subset","","",28,[[["ss"]],["sp"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_subset","","",29,[[["self"]],["option"]]],[11,"is_in_subset","","",29,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",29,[[["self"]],["ss"]]],[11,"from_subset","","",29,[[["ss"]],["sp"]]],[11,"into","render_matic::resource","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"to_subset","","",30,[[["self"]],["option"]]],[11,"is_in_subset","","",30,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",30,[[["self"]],["ss"]]],[11,"from_subset","","",30,[[["ss"]],["sp"]]],[11,"into","render_matic::serial","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"to_subset","","",31,[[["self"]],["option"]]],[11,"is_in_subset","","",31,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",31,[[["self"]],["ss"]]],[11,"from_subset","","",31,[[["ss"]],["sp"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"to_subset","","",32,[[["self"]],["option"]]],[11,"is_in_subset","","",32,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",32,[[["self"]],["ss"]]],[11,"from_subset","","",32,[[["ss"]],["sp"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_subset","","",33,[[["self"]],["option"]]],[11,"is_in_subset","","",33,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",33,[[["self"]],["ss"]]],[11,"from_subset","","",33,[[["ss"]],["sp"]]],[11,"into","render_matic::text","",34,[[["self"]],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"to_subset","","",34,[[["self"]],["option"]]],[11,"is_in_subset","","",34,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",34,[[["self"]],["ss"]]],[11,"from_subset","","",34,[[["ss"]],["sp"]]],[11,"into","render_matic::texture","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_subset","","",35,[[["self"]],["option"]]],[11,"is_in_subset","","",35,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",35,[[["self"]],["ss"]]],[11,"from_subset","","",35,[[["ss"]],["sp"]]],[11,"into","render_matic::time","",37,[[["self"]],["u"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"to_subset","","",37,[[["self"]],["option"]]],[11,"is_in_subset","","",37,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",37,[[["self"]],["ss"]]],[11,"from_subset","","",37,[[["ss"]],["sp"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"to_subset","","",36,[[["self"]],["option"]]],[11,"is_in_subset","","",36,[[["self"]],["bool"]]],[11,"to_subset_unchecked","","",36,[[["self"]],["ss"]]],[11,"from_subset","","",36,[[["ss"]],["sp"]]],[11,"vertex_data","render_matic::component","Collect vertex data according to the Component's type.",3,[[["self"],["mat4"],["datamanager"]],["result",["vec","error"]]]],[11,"rotation_matrix","","",3,[[["self"]],["mat3"]]],[11,"scaling_matrix","","",3,[[["self"]],["mat3"]]],[11,"translation_matrix","","",3,[[["self"]],["mat3"]]],[11,"into","render_matic::serial","(Hopefully) automatic conversion to simplify use with…",31,[[["self"]],["vec3"]]],[11,"into","","(Hopefully) automatic conversion to simplify use with…",32,[[["self"]],["vec2"]]],[11,"into","","(Hopefully) automatic conversion to simplify use with…",33,[[["self"]],["vec4"]]],[11,"default","render_matic::config","",4,[[],["self"]]],[11,"eq","render_matic::component","",2,[[["self"],["componenttype"]],["bool"]]],[11,"eq","render_matic::draw","",15,[[["self"],["animationtype"]],["bool"]]],[11,"eq","render_matic::entity","",20,[[["self"],["entitytype"]],["bool"]]],[11,"from","render_matic::error","",21,[[["binderror"]],["error"]]],[11,"from","","",21,[[["allocationerror"]],["error"]]],[11,"from","","",21,[[["outofmemory"]],["error"]]],[11,"from","","",21,[[["oomordevicelost"]],["error"]]],[11,"from","","",21,[[["shadererror"]],["error"]]],[11,"from","","",21,[[["hostexecutionerror"]],["error"]]],[11,"from","","",21,[[["creationerror"]],["error"]]],[11,"from","","",21,[[["viewerror"]],["error"]]],[11,"from","","",21,[[["error"]],["error"]]],[11,"from","","",21,[[["allocationerror"]],["error"]]],[11,"from","","",21,[[["imageerror"]],["error"]]],[11,"from","","",21,[[["error"]],["error"]]],[11,"from","","",21,[[["error"]],["error"]]],[11,"from","","",21,[[["creationerror"]],["error"]]],[11,"from","render_matic::serial","(Hopefully) automatic conversion to simplify use with…",31,[[["vec3"]],["position3d"]]],[11,"from","","(Hopefully) automatic conversion to simplify use with…",32,[[["vec2"]],["size"]]],[11,"from","","(Hopefully) automatic conversion to simplify use with…",33,[[["vec4"]],["color"]]],[11,"clone","render_matic::entity","",18,[[["self"]],["entity"]]],[11,"clone","","",20,[[["self"]],["entitytype"]]],[11,"clone","render_matic::geometry","",22,[[["self"]],["vertexdata"]]],[11,"clone","render_matic::render","",28,[[["self"]],["formattedvertexdata"]]],[11,"clone","render_matic::serial","",31,[[["self"]],["position3d"]]],[11,"clone","","",32,[[["self"]],["size"]]],[11,"clone","","",33,[[["self"]],["color"]]],[11,"deref","render_matic::time","",37,[[["self"]],["instant"]]],[11,"fmt","render_matic::error","Just take whatever was given for the error and print it out.",21,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","render_matic::geometry","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","render_matic::pipeline","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","render_matic::render","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","render_matic::serial","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","render_matic::texture","",35,[[["self"],["formatter"]],["result"]]],[11,"hash","render_matic::entity","",20,N],[11,"serialize","render_matic::component","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","render_matic::config","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","render_matic::draw","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","render_matic::entity","",18,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","render_matic::geometry","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","render_matic::serial","",31,[[["self"],["__s"]],["result"]]],[11,"serialize","","",32,[[["self"],["__s"]],["result"]]],[11,"deserialize","render_matic::component","",2,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"deserialize","render_matic::config","",4,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","render_matic::data","",7,[[["__d"]],["result"]]],[11,"deserialize","","",8,[[["__d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]],[11,"deserialize","","",10,[[["__d"]],["result"]]],[11,"deserialize","render_matic::draw","",12,[[["__d"]],["result"]]],[11,"deserialize","","",13,[[["__d"]],["result"]]],[11,"deserialize","","",14,[[["__d"]],["result"]]],[11,"deserialize","","",15,[[["__d"]],["result"]]],[11,"deserialize","render_matic::entity","",18,[[["__d"]],["result"]]],[11,"deserialize","","",20,[[["__d"]],["result"]]],[11,"deserialize","","",19,[[["__d"]],["result"]]],[11,"deserialize","render_matic::geometry","",23,[[["__d"]],["result"]]],[11,"deserialize","render_matic::resource","",30,[[["__d"]],["result"]]],[11,"deserialize","render_matic::serial","",31,[[["__d"]],["result"]]],[11,"deserialize","","",32,[[["__d"]],["result"]]],[11,"deserialize","","",33,[[["__d"]],["result"]]],[11,"deserialize","render_matic::text","",34,[[["__d"]],["result"]]],[11,"deserialize","render_matic::texture","",35,[[["__d"]],["result"]]],[11,"initialize","render_matic::time","",37,[[["self"]]]]],"paths":[[3,"Component"],[3,"ComponentManager"],[4,"ComponentType"],[4,"ComponentData"],[3,"Configuration"],[3,"Graphics"],[3,"Window"],[3,"Author"],[3,"Program"],[3,"GameMap"],[3,"GameData"],[3,"DataManager"],[3,"Spritesheet"],[3,"Background"],[3,"Animation"],[4,"AnimationType"],[8,"Draw2D"],[3,"DrawingSystem"],[3,"Entity"],[3,"EntityManager"],[4,"EntityType"],[4,"Error"],[3,"VertexData"],[3,"TransformData"],[4,"LayerDepth"],[8,"Transform2D"],[3,"PipelineData"],[3,"BufferObject"],[3,"FormattedVertexData"],[3,"Renderer"],[3,"ResourceManager"],[3,"Position3D"],[3,"Size"],[3,"Color"],[3,"GameFont"],[3,"Texture"],[3,"Profiler"],[3,"EPOCH"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
